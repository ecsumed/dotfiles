set nocompatible                " be iMproved, required
filetype off                    " required
syntax on                       " enable syntax

" PLUGIN SETTINGS {{{
" Ale settings
let g:ale_fixers = { '*': ['prettier', 'remove_trailing_lines', 'trim_whitespace']}

let g:ale_linters = {'python': ['flake8']}
let b:ale_linter_aliases = {'yaml': ['cloudformation', 'yaml']}

let g:ale_open_list = 1

" Lint check only on save
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_insert_leave = 0

" Auto close ale windows on buffers close
augroup CloseLoclistWindowGroup
    autocmd!
    autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

"CtrlP settings
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git)$',
  \ 'file': '\v\.(odt|gpg|jpg|png|xlsx|pyc|gz|tar|log)$',
  \ }

let g:ctrlp_working_path_mode = 'r'

" Easy Motion settings
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
" }}}

" AUTOCOMMANDS {{{
"Close NERDTree on close of last pane/tab/window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType")
 \ && b:NERDTreeType == "primary") | q | endif

" Set language specific indent sizes
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype groovy setlocal ts=2 sts=2 sw=2
" }}}

" AESTHETICS {{{
" font/colorscheme options "
set background=dark
set t_Co=256
" colorscheme kolor
" let g:airline_theme = 'kolor'
colorscheme kolor
let g:airline_theme = 'kolor'
let g:solarized_termcolors=256

" Airline tabs
let g:airline#extensions#tabline#enabled = 1

" visual cue for long lines
" highlight OverLength ctermbg=red ctermfg=white 
highlight OverLength ctermbg=gray ctermfg=black

" indent guides
set ts=4 sw=4 et
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" NERDTree positioning
let g:NERDTreeWinPos = "right"

set wildmenu
" }}}

" FUNCTIONS {{{ 
" Open URL in browser
function! Browser ()
   let line = getline (".")
   let line = matchstr (line, "http[^   ]*")
   exec "!konqueror ".line
endfunction

" Paste Toggle
let paste_mode = 0 " 0 = normal, 1 = paste

" Rotate theme
let themeindex=0
function! RotateColorTheme()
   let y = -1
   while y == -1
      let colorstring = "jellybeans#badwolf#gruvbox#kolor#molokai#solarized#"
      let x = match( colorstring, "#", g:themeindex )
      let y = match( colorstring, "#", x + 1 )
      let g:themeindex = x + 1
      if y == -1
         let g:themeindex = 0
      else
         let themestring = strpart(colorstring, x + 1, y - x - 1)
         return ":colorscheme ".themestring
      endif
   endwhile
endfunction

function! ToggleErrors()
    if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
        ALEToggle
    else
        ALEToggle
    endif
endfunction

" avoiding long lines
match OverLength /\%95v.\+/
" }}}

" SETTINGS {{{ 
"allow easy copy + paste from os clipboard with y and p shortcuts
set clipboard+=unnamed

"show line numbers in gutter
set number
set showmatch

"new line indent same as previous one
set autoindent

"spaces in place of tabs character
set expandtab
set smarttab

"no 8 space tabs, makes code compact
set shiftwidth=4
set softtabstop=4

"Ignoring case 
set ignorecase

"And so is Artificial Intellegence!
set smartcase

"highlight search results
set hlsearch

"Incremental searching
set incsearch

"Leave 'n' lines when scrolling
set scrolloff=5

"Start with Airline enabled
set laststatus=2

" No backup files
" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" Manual line folding
set foldmethod=indent
set foldlevel=99
" set foldclose=all

" Set mode line, check by -> :verbose set modeline? if not working
" some distros disable by default
set modelines=1
" }}}

" Mappings {{{

" Auto move mappings
" \\l
map <Leader><Leader>l <Plug>(easymotion-lineforward)
" \\j
map <Leader><Leader>j <Plug>(easymotion-j)
" \\k
map <Leader><Leader>k <Plug>(easymotion-k)
" \\h
map <Leader><Leader>h <Plug>(easymotion-linebackward)

" \\f{char} to move to {char}
map  <Leader><Leader>f <Plug>(easymotion-bd-f)
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Open Url on this line with the browser \w
map <Leader>B :call Browser ()<CR>

" Toggle Tagbar with \b
nnoremap <Leader>b :TagbarToggle<CR>

" Toggle Syntastic errors
nnoremap <silent> <C-e> :<C-u>call ToggleErrors()<CR>

" Rotate Color Scheme <F8>
nnoremap <silent> <F8> :execute RotateColorTheme()<CR>

" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nnoremap <leader>t :enew<cr>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nnoremap <leader>bq :bp <BAR> bd #<CR>

" CtrlP Buffer mode
nmap <leader>bb :CtrlPBuffer<cr>

" Move to the next/previous buffer
nmap <silent> <c-l> :bnext<CR>
nmap <silent> <c-h> :bprevious<CR>

" Close all buffers
nmap <leader><leader>bd :%bd<BAR>e#<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Easier split navigation
" Use ctrl-[hjkl] to select the active split!
nmap <leader>k :wincmd k<CR>
nmap <leader>j :wincmd j<CR>
nmap <leader>h :wincmd h<CR>
nmap <leader>l :wincmd l<CR>

" Easier window navigation
map <Tab> <C-W>w
map <Bar> <C-W>v<C-W><Right>
map -     <C-W>s<C-W><Down>

" Edit vimrc \ev
nnoremap <silent> <Leader>ev :tabnew<CR>:e ~/.vimrc<CR>

" probably the most used key, 'jj' to escape from insert mode
"decreases pinky pain
imap jj <C-[>

" the second most used key, one key stroke less
nore ; :
nore , ;

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation"

" don't skip wrapped lines
nnoremap <silent> k gk
nnoremap <silent> j gj
inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Space will toggle folds!
nnoremap <space> za

" These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" Toggle NERDTree View
map <C-n> :NERDTreeToggle<CR>

" Converts a series of visually selected lines into a single line consisting
" of a python list by adding quotes and square brackets.
vmap pyl :s!^!"!<CR>gv:s!$!",!<CR>gvJI[<Esc>A<BS>]<Esc>I

" pre-defined inserts, ex: enter insert mode, type 'AlP' and then ESCAPE/SPACE,
" and magic...
iab AlP ABCDEFGHIJKLMNOPQRSTUVWXYZ
iab MoN January February March April May June July
    \ August September October November December
iab MoO Jan Feb Mar Apr May Jun Jul Aug Sep Feb Mar
    \ Apr May Jun Jul Aug Sep Oct Nov Dec
iab NuM 123456789012345678901234567890123456789
    \ 01234567890123456789012345678901234567890 
iab RuL ----+----1----+----2----+----3----+----
    \ 4----+----5----+----6----+----7----+----8----+----9----+----0
" }}}

" vim:foldmethod=marker:foldlevel=0
