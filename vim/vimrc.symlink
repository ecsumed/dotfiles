runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

" set nocompatible              " be iMproved, required
" filetype off                  " required

" PLUGIN SETTINGS {{{
" Syntastic settings
let g:syntastic_python_checkers = ['python', 'flake8']
let g:syntastic_yaml_checkers = ['yamlxs']

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" }}}

" AUTOCOMMANDS {{{
"Close NERDTree on close of last pane/tab/window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType")
 \ && b:NERDTreeType == "primary") | q | endif

" Set indent size for ruby
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
" }}}

" AESTHETICS {{{
"gutter colors
"highlight LineNr ctermfg=grey ctermbg=white

" font/colorscheme options "
set background=dark
set t_Co=256
colorscheme kolor
let g:airline_theme = 'kolor'

" Airline tabs
let g:airline#extensions#tabline#enabled = 1

" visual cue for long lines
" highlight OverLength ctermbg=red ctermfg=white 
highlight OverLength ctermbg=gray ctermfg=black

" indent guides
set ts=4 sw=4 et
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" NERDTree positioning
let g:NERDTreeWinPos = "right"

set wildmenu

set cursorline
highlight CursorLine gui=underline cterm=underline
"hi Cursor ctermfg=White ctermbg=Yellow cterm=bold guifg=white guibg=yellow gui=bold
"hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
"hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
" }}}

" FUNCTIONS {{{ 
" Open URL in browser
function! Browser ()
   let line = getline (".")
   let line = matchstr (line, "http[^   ]*")
   exec "!konqueror ".line
endfunction

" Paste Toggle
let paste_mode = 0 " 0 = normal, 1 = paste

func! Paste_on_off()
   if g:paste_mode == 0
      set paste
      let g:paste_mode = 1
   else
      set nopaste
      let g:paste_mode = 0
   endif
   return
endfunc

" Rotate theme
let themeindex=0
function! RotateColorTheme()
   let y = -1
   while y == -1
      let colorstring = "jellybeans#badwolf#gruvbox#kolor#molokai#solarized#"
      let x = match( colorstring, "#", g:themeindex )
      let y = match( colorstring, "#", x + 1 )
      let g:themeindex = x + 1
      if y == -1
         let g:themeindex = 0
      else
         let themestring = strpart(colorstring, x + 1, y - x - 1)
         return ":colorscheme ".themestring
      endif
   endwhile
endfunction

function! ToggleErrors()
    if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
         " No location/quickfix list shown, open syntastic error location panel
        Errors
    else
        lclose
    endif
endfunction

" avoiding long lines
match OverLength /\%81v.\+/
" }}}

" SETTINGS {{{ 
"show line numbers in gutter
set number
set showmatch

"new line indent same as previous one
set autoindent

"spaces in place of tabs character
set expandtab
set smarttab

"no 8 space tabs, makes code compact
set shiftwidth=4
set softtabstop=4

"Ignoring case 
set ignorecase

"And so is Artificial Intellegence!
set smartcase

"highlight search results
set hlsearch

"Incremental searching
set incsearch

"Leave 'n' lines when scrolling
set scrolloff=5

"Start with Airline enabled
set laststatus=2

"Backupfiles and temp files all in one place
"set backup
"set backupdir=~/.vim/backup
"set directory=~/.vim/tmp

" Manual line folding
set foldmethod=syntax
set foldlevel=99
set foldclose=all

" Set mode line, check by -> :verbose set modeline? if not working
" some distros disable by default
set modelines=1
" }}}

" Mappings {{{
" Open Url on this line with the browser \w
map <Leader>w :call Browser ()<CR>

" Toggle Tagbar with \b
nnoremap <Leader>b :TagbarToggle<CR>

" Toggle Syntastic errors
nnoremap <silent> <C-e> :<C-u>call ToggleErrors()<CR>

" Toggle Paste Mode <F10>
nnoremap <silent> <F10> :call Paste_on_off()<CR>
set pastetoggle=<F10>

" Rotate Color Scheme <F8>
nnoremap <silent> <F8> :execute RotateColorTheme()<CR>

" Next Tab
nnoremap <silent> <C-Right> :tabnext<CR>
 
" Previous Tab
nnoremap <silent> <C-Left> :tabprevious<CR>
"
" New Tab
nnoremap <silent> <C-t> :tabnew<CR>

" Edit vimrc \ev
nnoremap <silent> <Leader>ev :tabnew<CR>:e ~/.vimrc<CR>

" probably the most used key, 'jj' to escape from insert mode
"decreases pinky pain
imap jj <C-[>

" the second most used key, one key stroke less
nore ; :
nore , ;

" Easier split navigation                     
" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>            
nmap <silent> <c-j> :wincmd j<CR>            
nmap <silent> <c-h> :wincmd h<CR>            
nmap <silent> <c-l> :wincmd l<CR>

" don't skip wrapped lines
nnoremap <silent> k gk
nnoremap <silent> j gj
inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Space will toggle folds!
nnoremap <space> za

" These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" Toggle NERDTree View
map <C-n> :NERDTreeToggle<CR>

" Converts a series of visually selected lines into a single line consisting
" of a python list by adding quotes and square brackets.
vmap pyl :s!^!"!<CR>gv:s!$!",!<CR>gvJI[<Esc>A<BS>]<Esc>I

" pre-defined inserts, ex: enter insert mode, type 'AlP' and then ESCAPE/SPACE,
" and magic...
iab AlP ABCDEFGHIJKLMNOPQRSTUVWXYZ
iab MoN January February March April May June July
    \ August September October November December
iab MoO Jan Feb Mar Apr May Jun Jul Aug Sep Feb Mar
    \ Apr May Jun Jul Aug Sep Oct Nov Dec
iab NuM 123456789012345678901234567890123456789
    \ 01234567890123456789012345678901234567890 
iab RuL ----+----1----+----2----+----3----+----
    \ 4----+----5----+----6----+----7----+----8----+----9----+----0
" }}}

" vim:foldmethod=marker:foldlevel=0
