"Most of the stuff is borrowed from other (read 'more creative')
"users. There is alot of other cool stuff out there. This is just
"what I need and use.

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


"{{{
"==============PLUGINS====================
"
Plugin 'gmarik/Vundle.vim'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/nerdtree'
Plugin 'klen/python-mode'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"}}}


"=====non-Plugin stuff after this line====


"{{{
"==============AUTOCOMMANDS====================

"Close NERDTree on close of last pane/tab/window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"}}}


"{{{
"==============AESTHETICS====================

""gutter colors
"highlight LineNr ctermfg=grey ctermbg=white

" font/colorscheme options "
set background=dark
set t_Co=256
colorscheme jellybeans
let g:airline_theme = 'jellybeans'
"}}}

"{{{
"==============FUNCTIONS====================

"{{{ Open URL in browser
function! Browser ()
   let line = getline (".")
   let line = matchstr (line, "http[^   ]*")
   exec "!konqueror ".line
endfunction
"}}}

"{{{ Paste Toggle
let paste_mode = 0 " 0 = normal, 1 = paste

func! Paste_on_off()
   if g:paste_mode == 0
      set paste
      let g:paste_mode = 1
   else
      set nopaste
      let g:paste_mode = 0
   endif
   return
endfunc
"}}}

"{{{ Theme Rotating
let themeindex=0
function! RotateColorTheme()
   let y = -1
   while y == -1
      let colorstring = "jellybeans#badwolf#gruvbox#kolor#molokai#solarized#"
      let x = match( colorstring, "#", g:themeindex )
      let y = match( colorstring, "#", x + 1 )
      let g:themeindex = x + 1
      if y == -1
         let g:themeindex = 0
      else
         let themestring = strpart(colorstring, x + 1, y - x - 1)
         return ":colorscheme ".themestring
      endif
   endwhile
endfunction
"}}}

"}}}

"{{{
"===============SETTINGS==================

"Folding Stuffs
set foldmethod=marker
"set foldlevel=1
"set foldclose=all

"show line numbers in gutter
set number
set showmatch

"new line indent same as previous one
set autoindent

"spaces in place of tabs character
set expandtab
set smarttab

"no 8 space tabs, makes code compact
set shiftwidth=4
set softtabstop=4

"Ignoring case
set ignorecase

"And so is Artificial Intellegence!
set smartcase

"highlight search results
set hlsearch

"Incremental searching
set incsearch

"Start with Airline enabled
set laststatus=2

"Backupfiles and temp files all in one place
"set backup
"set backupdir=~/.vim/backup
"set directory=~/.vim/tmp
"}}}

"{{{
"===============MAPPINGS==================

"Open Url on this line with the browser \w
map <Leader>w :call Browser ()<CR>

"Toggle Paste Mode <F10>
nnoremap <silent> <F10> :call Paste_on_off()<CR>
set pastetoggle=<F10>

"Rotate Color Scheme <F8>
nnoremap <silent> <F8> :execute RotateColorTheme()<CR>

"Next Tab
nnoremap <silent> <C-Right> :tabnext<CR>
"
"Previous Tab
nnoremap <silent> <C-Left> :tabprevious<CR>
"
"New Tab
nnoremap <silent> <C-t> :tabnew<CR>

"Edit vimrc \ev
nnoremap <silent> <Leader>ev :tabnew<CR>:e ~/.vimrc<CR>

"probably the most used key, 'jj' to escape from insert mode
"decreases pinky pain
imap jj <C-[>

"the second most used key, one key stroke less
nore ; :
nore , ;

"Easier split navigation
" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

"don't skip wrapped lines
nnoremap <silent> k gk
nnoremap <silent> j gj
inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja

"Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

"Space will toggle folds!
nnoremap <space> za

"These will make it so that going to the next one in a
"search will center on the line it's found in.
map N Nzz
map n nzz

"Toggle NERDTree View
map <C-n> :NERDTreeToggle<CR>

"pre-defined inserts, ex: enter insert mode, type 'AlP' and then ESCAPE/SPACE,
"and magic...
iab AlP ABCDEFGHIJKLMNOPQRSTUVWXYZ
iab MoN January February March April May June July August September October November December
iab MoO Jan Feb Mar Apr May Jun Jul Aug Sep Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
iab NuM 12345678901234567890123456789012345678901234567890123456789012345678901234567890
iab RuL ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0
"}}}

let g:NERDTreeWinPos = "right"
